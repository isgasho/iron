Module {
    name: "FunctionTest",
    environment: {
        "c": Function {
            public: false,
            name: "c",
            parameters: Some(
                [
                    Parameter {
                        label: "some",
                        name: "value",
                        kind: "String"
                    }
                ]
            ),
            returns: None,
            body: [
                Stack {
                    root: [
                        Singleton {
                            item: FunctionCall {
                                identifier: "print",
                                arguments: [
                                    FunctionArgument {
                                        label: None,
                                        value: [
                                            Singleton {
                                                item: Identifier {
                                                    name: "value"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        "b": Function {
            public: false,
            name: "b",
            parameters: None,
            returns: Some(
                [
                    "String"
                ]
            ),
            body: [
                Return {
                    root: [
                        Singleton {
                            item: FunctionCall {
                                identifier: "d",
                                arguments: [
                                    FunctionArgument {
                                        label: None,
                                        value: [
                                            Singleton {
                                                item: StringValue {
                                                    value: "world"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        "a": Function {
            public: true,
            name: "a",
            parameters: None,
            returns: None,
            body: [
                Stack {
                    root: [
                        Singleton {
                            item: FunctionCall {
                                identifier: "print",
                                arguments: [
                                    FunctionArgument {
                                        label: None,
                                        value: [
                                            Singleton {
                                                item: StringValue {
                                                    value: "hello"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        "main": Function {
            public: false,
            name: "main",
            parameters: None,
            returns: None,
            body: [
                Stack {
                    root: [
                        Singleton {
                            item: FunctionCall {
                                identifier: "a",
                                arguments: []
                            }
                        }
                    ]
                },
                Stack {
                    root: [
                        Singleton {
                            item: FunctionCall {
                                identifier: "assert",
                                arguments: []
                            }
                        }
                    ]
                }
            ]
        },
        "e": Function {
            public: true,
            name: "e",
            parameters: None,
            returns: None,
            body: [
                Stack {
                    root: [
                        Singleton {
                            item: FunctionCall {
                                identifier: "print",
                                arguments: [
                                    FunctionArgument {
                                        label: None,
                                        value: [
                                            Singleton {
                                                item: StringValue {
                                                    value: "hello"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        "d": Function {
            public: false,
            name: "d",
            parameters: Some(
                [
                    Parameter {
                        label: "_",
                        name: "value",
                        kind: "String"
                    }
                ]
            ),
            returns: Some(
                [
                    "String"
                ]
            ),
            body: [
                Return {
                    root: [
                        Singleton {
                            item: FunctionCall {
                                identifier: "g",
                                arguments: [
                                    FunctionArgument {
                                        label: Some(
                                            "some"
                                        ),
                                        value: [
                                            Singleton {
                                                item: Identifier {
                                                    name: "value"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        "f": Function {
            public: false,
            name: "f",
            parameters: None,
            returns: Some(
                [
                    "String"
                ]
            ),
            body: [
                Return {
                    root: [
                        Singleton {
                            item: StringValue {
                                value: "world"
                            }
                        }
                    ]
                }
            ]
        },
        "g": Function {
            public: false,
            name: "g",
            parameters: Some(
                [
                    Parameter {
                        label: "some",
                        name: "value",
                        kind: "String"
                    }
                ]
            ),
            returns: Some(
                [
                    "String"
                ]
            ),
            body: [
                Return {
                    root: [
                        Singleton {
                            item: Identifier {
                                name: "value"
                            }
                        }
                    ]
                }
            ]
        }
    }
}