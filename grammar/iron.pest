////////////////////////////////////////////////////////////////////////////////
//                   _          _           _            _                    //
//                  /\ \       /\ \        /\ \         /\ \     _            //
//                  \ \ \     /  \ \      /  \ \       /  \ \   /\_\          //
//                  /\ \_\   / /\ \ \    / /\ \ \     / /\ \ \_/ / /          //
//                 / /\/_/  / / /\ \_\  / / /\ \ \   / / /\ \___/ /           //
//                / / /    / / /_/ / / / / /  \ \_\ / / /  \/____/            //
//               / / /    / / /__\/ / / / /   / / // / /    / / /             //
//              / / /    / / /_____/ / / /   / / // / /    / / /              //
//          ___/ / /__  / / /\ \ \  / / /___/ / // / /    / / /               //
//         /\__\/_/___\/ / /  \ \ \/ / /____\/ // / /    / / /                //
//         \/_________/\/_/    \_\/\/_________/ \/_/     \/_/                 //
//                                                                            //
//                    L A N G U A G E     G R A M M A R                       //
//                                                                            //
// LAST REVISED 4 JANUARY, 2019                                               //
//                                                                            //
// The purpose of this document is to provide a SINGLE SOURCE OF TRUTH for    //
// the syntax of the Iron programming language. Any proposals to the language //
// that include syntax modifications must include an updated version of this  //
// grammar. Because we use Pest to generate the Iron language parser, the     //
// test suite will fail if syntax changes are not implemented correctly.      //
//                                                                            //
// For those new to programming language design, this is known as a CONTEXT-  //
// FREE GRAMMAR (CFG), which consists of a set of PRODUCTION RULES. Starting  //
// from the top-level rule (MODULE), we recursively determine if a program is //
// written correctly. If there is a syntax error, we can tell the programmer  //
// where it occurs. If not, we move onto the next compilation phase.          //
//                                                                            //
// For more information on context-free grammars:                             //
// https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html     //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

// The MODULE is the highest-level abstraction in an Iron program. It is simply
// a file with the appropriate extension (".fe"), which contains Iron code.
// Modules can export functions, types, protocols, and other objects by marking
// them as PUBLIC.
module = { statement_list }

// An Iron module consists of one or more statements. All statements except for
// the import statement can be marked as `public`. If a statement is marked as
// public, then it can be imported into other Iron modules. Otherwise, it can
// only be accessed from within the module itself.
statement_list = _{ statement* }
statement = {
    import
    | function
    | custom_type
}

// As you will see, we define rules for many keywords because we want to include
// them in our AST. String literals inside rules that are not keywords end up
// being ignored by the parser (because the rule itself provides enough info).
public = { "public" }

// Custom types are composed from base types and other custom types. Once a type
// is defined, it can implement protocols in order to acquire superpowers. If
// a type doesn't adhere to any protocols, it behaves more like a Rust struct
// or TypeScript interface.
custom_type = {
    (public? ~ "type"
        ~ identifier
        ~ open_brace
        ~ attribute_list
        ~ close_brace)
}

// Custom types define a series of attributes; each attribute has a name and
// an associated type. Unlike function parameters, type attributes do not have
// a label; you refer to the attributes directly by their name.
attribute_list = { attribute ~ (comma ~ attribute)? }
attribute = { identifier ~ colon ~ kind }

// The IMPORT statement allows us to retrieve Iron code from some external
// location. You can import an entire module or specific public components.
import = {
    // The first way you can import from a module is by specifying specific
    // components you want from the module. This will search the environment
    // for the target module and, if the associated components are public,
    // we expose them directly to the host module.
    ("import"
        ~ open_brace ~ identifier_list ~ close_brace
        ~ "from" ~ string_literal)
    
    // The next way to import a module is to retrieve it in its entirety,
    // changing its name to something you deem fit. This is useful if you have
    // another component with a conflicting name.
    | ("import" ~ string_literal ~ "as" ~ identifier)

    // If you do not want to rename the module, you can just import the path
    // directly. When you do this, the file stem of the module (e.g. `Apple`
    // for `Apple.fe`) will be used as the module identifier.
    | ("import" ~ string_literal)
}

// The FUNCTION statement allows us to define a named sequence of operations
// that work on zero or more provided parameters. We can also return zero or
// more values.
function = {
    (public? ~ "function"
        ~ identifier
        ~ function_parameter_list?
        ~ returns?
        ~ open_brace
        ~ expression*
        ~ close_brace)
}

// The function parameter list contains one or more function parameters.
function_parameter_list = {
    open_paren ~ function_parameter 
        ~ (comma ~ function_parameter)* 
        ~ close_paren
}

// Function parameters in Iron are inspired by Swift. They are typed, and offer
// a label system that helps developers write more verbose code.
function_parameter = { (label ~ identifier ~ colon ~ kind) }

// The return statement just lists different types.
returns = { thin_arrow ~ kind ~ (comma ~ kind)* }

label = { identifier | underscore }
identifier = @{ (ASCII_ALPHA ~ ASCII_ALPHANUMERIC*) }
identifier_list = { identifier ~ (comma ~ identifier)* }

// Kind is used to identify types. This is crucial because, not only can we
// utilize base and custom Types, but we also have syntax that can indicate
// collections of these different types.
kind = {
    identifier
    | kind_list
    | kind_set
}

// [!] NOTE -- These don't really work very well yet.
kind_list = { (open_bracket ~ identifier ~ close_bracket) }
kind_set = { (open_paren ~ kind ~ (comma ~ kind)* ~ close_paren) }

assignment = {
    ("let" | "const")
    ~ identifier
    ~ (":" ~ kind)?
    ~ "="
    ~ expression
}

function_call = {
    identifier
    ~ open_paren
    ~ function_arg_list?
    ~ close_paren
}

function_arg_list = { function_arg ~ (comma ~ function_arg)* }
function_arg = { (label ~ ":")? ~ expression }
return_stmt = { "return" ~ expression }

// Order matters here. Specifically, we have value in the last position because
// otherwise, it would be caught first and other statements like function calls
// would not be handled correctly.
expression = {
    assignment
    | return_stmt

    // Special rule; see below for more information.
    | op_sequence
}

// This section contains various tokens that need to be caught by the Pest
// parser generator. This allows us to quickly verify correctness of many things
// like arrays, tuples, function parameter lists, etc.
comma = _{ ","}
colon = _{ ":" }
underscore = _{ "_" }
open_paren = _{ "(" }
close_paren = _{ ")" }
open_bracket = _{ "[" }
close_bracket = _{ "]" }
open_brace = _{ "{" }
close_brace = _{ "}" }
thin_arrow = _{ "->" }
wide_arrow = _{ "=>" }

// These are the various operators that can be used in Iron expressions.
// Unlike the other tokens above (e.g. COMMA, COLON, UNDERSCORE), we do not
// hide their values from our resulting AST. Instead, we hide all of the nested
// expression handlers (e.g. OP_SEQUENCE, LOGICAL_COMPARE). This means that we
// see the actual operators instead of tons and tons of nested statements.
op_eq = { "equals" | "==" }
op_neq = { "!=" }
op_add = { "+" }
op_subtract = { "-" }
op_pow = { "**" }
op_multiply = { "*" }
op_divide = { "/" }
op_reference = { "@" }

// These operators are typically used with numeric values, such as Integers or
// Floats, though any type can adhere to the protocols necessary to use them.
numerical_comp = _{ op_gt | op_gte | op_lt | op_lte }
    op_gt = { ">" }
    op_gte = { ">=" }
    op_lt = { "<" }
    op_lte = { "<=" }

// Logic operators are typically used with Boolean values, though any type
// can adhere to the protocols necessary to use them.
logic_op = _{ logic_and | logic_or | logic_xor }
	logic_and = { "and" | "&&" }
    logic_or = { "or" | "||" }
    logic_xor = { "xor" }
    logic_not = { "!" | "not" }

// Bitwise operators are typically used in numeric values, operating at the
// bit level. Like with the other op categories, they have protocols that
// allow any type to define custom behavior.
bitwise_op = _{ bitwise_and | bitwise_or | bitwise_xor }
    bitwise_and = { "&" }
    bitwise_or = { "|" }
    bitwise_xor = { "^" }

unary_op = _{ logic_not | op_subtract }

// It's time to talk about how OP_SEQUENCE works. Basically, to avoid getting
// trapped forever in a left-recursive grammar, we use expression rules that 
// have a built-in heirarchy. With the help of Pest, the AST ends up hiding a
// lot of this mess, making it easy to parse rather complicated expressions.
//
// For more information:
// https://www.craftinginterpreters.com/parsing-expressions.html
op_sequence = { bitwise_comp ~ ((op_eq | op_neq) ~ bitwise_comp)* }
bitwise_comp = _{ logic_comp ~ (bitwise_op ~ logic_comp)* }
logic_comp = _{ num_comp ~ (logic_op ~ num_comp)* }
num_comp = _{ add_sub ~ (numerical_comp ~ add_sub)* }
add_sub = _{ mtp_div ~ ((op_add | op_subtract) ~ mtp_div)* }
mtp_div = _{ unary ~ ((op_pow | op_multiply | op_divide) ~ unary)* }
unary = _{ unary_op ~ unary | value }

// A value can be one of many different literal types. However, it can also
// wrap an expression in parentheses; in that case, we go all the way back up
// and start the expression parsing again.
value = _{
    string_literal
    | function_call
    | numeric_value
    | boolean_value
    | null_value
    | reference
    | identifier
    | "(" ~ expression ~ ")"
}

// At some point we will probably change this to better identify float literals;
// however, it is good enough for the stage we are at now.
numeric_value = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
string_literal = ${ "\"" ~ string ~ "\"" }
string = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
boolean_value = { "true" | "false" }
null_value = { "null" }

reference = { "@" ~ identifier }

// These rules enable implicit whitespace. For more information, visit:
// https://pest.rs/book/grammars/syntax.html#implicit-whitespace
WHITESPACE = _{ " " | "\n" | "\r" }
COMMENT = _{
    ("/*" ~ (!"*/" ~ ANY)* ~ "*/") // Block comment
    | ("//" ~ (!"\n" ~ ANY)* ~ "\n") // Line comment
}